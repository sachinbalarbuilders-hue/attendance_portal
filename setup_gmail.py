#!/usr/bin/env python3
"""
Gmail Setup Script for OTP System
This script helps you configure Gmail credentials for the OTP system
"""

import os
import getpass
from email_service import EmailService

def setup_gmail():
    """Interactive Gmail setup"""
    print("🔧 Gmail Setup for OTP System")
    print("=" * 40)
    print()
    
    print("Before proceeding, make sure you have:")
    print("1. ✅ Enabled 2-factor authentication on your Gmail account")
    print("2. ✅ Generated an App Password (not your regular password)")
    print()
    
    # Get Gmail credentials
    email = input("Enter your Gmail address: ").strip()
    if not email or '@gmail.com' not in email:
        print("❌ Please enter a valid Gmail address")
        return False
    
    print("\nEnter your Gmail App Password (16 characters, no spaces):")
    print("(This is NOT your regular Gmail password)")
    app_password = getpass.getpass("App Password: ").strip()
    
    if not app_password or len(app_password) < 16:
        print("❌ App Password should be 16 characters long")
        return False
    
    # Set environment variables
    os.environ['GMAIL_EMAIL'] = email
    os.environ['GMAIL_APP_PASSWORD'] = app_password
    
    print("\n🧪 Testing email connection...")
    
    # Test the connection
    email_service = EmailService()
    try:
        if email_service.test_email_connection():
            print("✅ Email connection successful!")
            
            # Test sending an email
            print("\n📧 Testing email sending...")
            test_otp = email_service.generate_otp()
            
            if email_service.send_otp_email(email, test_otp, "Test User"):
                print("✅ Test email sent successfully!")
                print(f"📱 Check your inbox for OTP: {test_otp}")
                
                # Save configuration
                save_configuration(email, app_password)
                return True
            else:
                print("❌ Failed to send test email")
                return False
        else:
            print("❌ Email connection failed")
            return False
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

def save_configuration(email, app_password):
    """Save configuration to a file"""
    config_content = f"""#!/usr/bin/env python3
# Gmail Configuration for OTP System
# Generated by setup_gmail.py

import os

# Gmail SMTP Configuration
GMAIL_EMAIL = "{email}"
GMAIL_APP_PASSWORD = "{app_password}"

# Set environment variables
os.environ['GMAIL_EMAIL'] = GMAIL_EMAIL
os.environ['GMAIL_APP_PASSWORD'] = GMAIL_APP_PASSWORD

print("Gmail configuration loaded successfully!")
print(f"Email: {GMAIL_EMAIL}")
"""
    
    try:
        with open('gmail_config.py', 'w') as f:
            f.write(config_content)
        print("\n💾 Configuration saved to 'gmail_config.py'")
        print("   You can import this file in your application")
    except Exception as e:
        print(f"⚠️  Could not save configuration: {e}")

def main():
    """Main setup function"""
    print("Welcome to Gmail Setup for Attendance Portal OTP System!")
    print()
    
    if setup_gmail():
        print("\n🎉 Gmail setup completed successfully!")
        print("\nNext steps:")
        print("1. ✅ Gmail is configured and working")
        print("2. 🚀 Start your application: python app.py")
        print("3. 🧪 Test the OTP password change feature")
        print("\nYour OTP system is ready to use!")
    else:
        print("\n❌ Gmail setup failed")
        print("\nTroubleshooting:")
        print("1. Make sure 2-factor authentication is enabled")
        print("2. Generate a new App Password")
        print("3. Check your internet connection")
        print("4. Verify the App Password is correct (16 characters)")
        print("\nFor detailed help, see GMAIL_SETUP_GUIDE.md")

if __name__ == "__main__":
    main()
